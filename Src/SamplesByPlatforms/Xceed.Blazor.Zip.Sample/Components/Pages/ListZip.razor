@page "/listzip"
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using Xceed.Zip
@rendermode InteractiveServer

<h1>Select a .zip file to list the content</h1>

<div style="display: flex; margin-top: 50px">
    <div style="display: flex; flex-direction: column; margin-right: 20px;">
        <label for="formFileSimple" class="form-label">Select files (10MB max. 1 item)</label>
        <InputFile OnChange="HandleFileSelection" class="form-control" type="file" id="formFileSimple" accept=".zip" maxAllowedSize="10485760" maxAllowedFiles="1" />
    </div>
    <div style="border: 1px solid #FE671A; padding: 10px; width: 50%; overflow-y: auto;">
        <h4>Files inside the zip</h4>
        <ul class="list-group">
            @foreach( var file in zipContents )
            {
              <li class="list-group-item">@file</li>
            }
        </ul>
    </div>
</div>

@code {
    private ElementReference inputFile;
    private List<string> zipContents = new();
    private List<IBrowserFile> selectedFile = new List<IBrowserFile>();
    [Inject] private IJSRuntime JSRuntime { get; set; }

    private async Task HandleFileSelection( InputFileChangeEventArgs e )
    {
        selectedFile = e.GetMultipleFiles(1).ToList();
        try
        {
            if( selectedFile.Count == 0 )
            {
                return;
            }

            if( selectedFile.Count == 1 )
            {
                zipContents = new();
                var file = selectedFile[ 0 ];
                if( file.Size > 10485760 )
                    await JSRuntime.InvokeVoidAsync( "alert", "Please select a .zip file under 10MB of size." );
                else
                {
                    if( Path.GetExtension( file.Name ).ToLower() == ".zip" )
                    {
                        var tempFilePath = Path.Combine( Path.GetTempPath(), file.Name );
                        using( var stream = file.OpenReadStream( maxAllowedSize: 10485760 ) ) // 10 MB limit per file
                        using( var fileStream = File.Create( tempFilePath ) )
                            await stream.CopyToAsync( fileStream );
                        var zip = new ZipArchive( new Xceed.FileSystem.DiskFile( tempFilePath ) );

                        foreach( Xceed.FileSystem.AbstractFile f in zip.GetFiles( true ) )
                            zipContents.Add( f.ToString() );
                    }
                }                
            }
            else
            {
                await JSRuntime.InvokeVoidAsync( "alert", "Please select only one file." );
            }
        }
        catch( Exception ex )
        {
            await JSRuntime.InvokeVoidAsync( "consoleLog", ex.Message );
        }
    }
}